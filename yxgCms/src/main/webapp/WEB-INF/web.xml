<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!--
		Define spring context configuration file location.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:applicationContext-mysql.xml,
			classpath:applicationContext-common.xml,
			classpath:*/applicationContext-*.xml
		</param-value>
	</context-param>

	<!--
		Define properties file location.
	-->
	<context-param>
		<param-name>appConfigLocation</param-name>
		<param-value>classpath:config.properties</param-value>
	</context-param>

	<!--
		Define Log4j configuration file location.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.xml</param-value>
	</context-param>

	<!--
		Add spring Log4j configuration listener.
	-->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!--
		Add spring core listener.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--
		Add ConfigureLoaderListener to load properties file.
		Class ApplicationConfiguration is not recommended to use.
		Instead of spring util.
		Examples:   <util:properties />
	-->
	<listener>
		<listener-class>cn.videoworks.commons.webdev.listener.ConfigureLoaderListener
		</listener-class>
	</listener>

	<!--
		Add character encoding filter.
	-->
	<filter>
		<filter-name>utf8Encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>utf8Encoding</filter-name>
		<url-pattern>/</url-pattern>
	</filter-mapping>

	<!--
		Add this filter to open a read-only session.
		This filter is used to fixed LazyInitialized problem.
		Disable it if you are not using Hibernate.
	-->
	<!--
	<filter>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<filter-class>
			org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
		</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	-->

	<!--
		Add Spring MVC DispatcherServlet for dispatch incoming requests.
	-->
	<servlet>
		<servlet-name>spring-mvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				classpath:spring-mvc-common.xml,
				classpath:spring-mvc-app.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring-mvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!--
		Add freemarker servlet for process internal forwarded FTL request.
	-->
	<servlet>
		<servlet-name>freemarker-tiles</servlet-name>
		<servlet-class>freemarker.ext.servlet.FreemarkerServlet</servlet-class>
		<init-param>
			<param-name>TemplatePath</param-name>
			<param-value>/WEB-INF/</param-value>
		</init-param>
		<init-param>
			<param-name>NoCache</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>ContentType</param-name>
			<param-value>text/html; charset=UTF-8</param-value>
		</init-param>
		<!-- 0 is for development only! Use higher value otherwise. -->
		<init-param>
			<param-name>template_update_delay</param-name>
			<param-value>0</param-value>
		</init-param>
		<init-param>
			<param-name>default_encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>Debug</param-name>
			<param-value>n</param-value>
		</init-param>
		<init-param>
			<param-name>locale</param-name>
			<param-value>zh_CN</param-value>
		</init-param>
		<init-param>
			<param-name>number_format</param-name>
			<param-value>#</param-value>
		</init-param>
		<init-param>
			<param-name>date_format</param-name>
			<param-value>yyyy-MM-dd</param-value>
		</init-param>
		<init-param>
			<param-name>url_escaping_charset</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>whitespace_stripping</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>freemarker-tiles</servlet-name>
		<url-pattern>*.ftl</url-pattern>
	</servlet-mapping>

	<!--
		Configure CXF servlet to process WebService request.
		Include this if you publishing JAX-WS WebService with Apache CXF.
	-->
	<!--
		<servlet>
			<servlet-name>cxf</servlet-name>
			<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>cxf</servlet-name>
			<url-pattern>/services/*</url-pattern>
		</servlet-mapping>
	-->

	<!--
		Include Apache Tiles 2 Tag libraries.
		(It just for fuck the GFW.)
	-->
	<jsp-config>
		<taglib>
			<taglib-uri>http://tiles.apache.org/tags-tiles</taglib-uri>
			<taglib-location>/WEB-INF/dtd/tiles2-jsp.tld</taglib-location>
		</taglib>
	</jsp-config>
</web-app>